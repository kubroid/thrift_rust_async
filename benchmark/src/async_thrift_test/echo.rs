// Autogenerated by Thrift Compiler ()
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

#![allow(unused_imports)]
#![allow(unused_extern_crates)]
#![cfg_attr(feature = "clippy", allow(too_many_arguments, type_complexity))]
#![cfg_attr(rustfmt, rustfmt_skip)]

extern crate async_thrift;

use std::cell::RefCell;
use std::collections::{BTreeMap, BTreeSet};
use std::convert::{From, TryFrom};
use std::default::Default;
use std::error::Error;
use std::fmt;
use std::fmt::{Display, Formatter};
use std::rc::Rc;

use async_thrift::{ApplicationError, ApplicationErrorKind, ProtocolError, ProtocolErrorKind, TThriftClient};
use async_thrift::protocol::{TFieldIdentifier, TListIdentifier, TMapIdentifier, TMessageIdentifier, TMessageType, TAsyncInputProtocol, TAsyncOutputProtocol, TSetIdentifier, TStructIdentifier, TType};
use async_thrift::protocol::field_id;
use async_thrift::protocol::verify_expected_message_type;
use async_thrift::protocol::verify_expected_sequence_number;
use async_thrift::protocol::verify_expected_service_call;
use async_thrift::protocol::verify_required_field_exists;
use async_trait::async_trait;
use async_thrift::server::TAsyncProcessor;
use async_thrift::OrderedFloat;

//
// LongMessageTest service client
//

#[async_trait]
pub trait TLongMessageTestSyncClient {
  async fn echo(&mut self, input: Vec<i8>) -> async_thrift::Result<Vec<i8>>;
}

pub trait TLongMessageTestSyncClientMarker {}

pub struct LongMessageTestSyncClient<IP, OP> where IP: TAsyncInputProtocol, OP: TAsyncOutputProtocol {
  _i_prot: IP,
  _o_prot: OP,
  _sequence_number: i32,
}

impl <IP, OP> LongMessageTestSyncClient<IP, OP> where IP: TAsyncInputProtocol, OP: TAsyncOutputProtocol {
  pub fn new(input_protocol: IP, output_protocol: OP) -> LongMessageTestSyncClient<IP, OP> {
    LongMessageTestSyncClient { _i_prot: input_protocol, _o_prot: output_protocol, _sequence_number: 0 }
  }
}

impl <IP, OP> TThriftClient for LongMessageTestSyncClient<IP, OP> where IP: TAsyncInputProtocol, OP: TAsyncOutputProtocol {
  fn i_prot_mut(&mut self) -> &mut (dyn TAsyncInputProtocol + Send) { &mut self._i_prot }
  fn o_prot_mut(&mut self) -> &mut (dyn TAsyncOutputProtocol + Send) { &mut self._o_prot }
  fn sequence_number(&self) -> i32 { self._sequence_number }
  fn increment_sequence_number(&mut self) -> i32 { self._sequence_number += 1; self._sequence_number }
}

impl <IP, OP> TLongMessageTestSyncClientMarker for LongMessageTestSyncClient<IP, OP> where IP: TAsyncInputProtocol, OP: TAsyncOutputProtocol {}

#[async_trait]
impl <C: TThriftClient + TLongMessageTestSyncClientMarker+ Send> TLongMessageTestSyncClient for C {
  async fn echo(&mut self, input: Vec<i8>) -> async_thrift::Result<Vec<i8>> {
    (
      {
        self.increment_sequence_number();
        let message_ident = TMessageIdentifier::new("echo", TMessageType::Call, self.sequence_number());
        let call_args = LongMessageTestEchoArgs { input: input };
        self.o_prot_mut().write_message_begin(&message_ident).await?;
        call_args.write_to_out_protocol(self.o_prot_mut()).await?;
        self.o_prot_mut().write_message_end().await?;
        self.o_prot_mut().flush().await
      }
    )?;
    {
      let message_ident = self.i_prot_mut().read_message_begin().await?;
      verify_expected_sequence_number(self.sequence_number(), message_ident.sequence_number)?;
      verify_expected_service_call("echo", &message_ident.name)?;
      if message_ident.message_type == TMessageType::Exception {
        let remote_error = async_thrift::Error::read_application_error_from_in_protocol(self.i_prot_mut()).await?;
        self.i_prot_mut().read_message_end().await?;
        return Err(async_thrift::Error::Application(remote_error))
      }
      verify_expected_message_type(TMessageType::Reply, message_ident.message_type)?;
      let result = LongMessageTestEchoResult::read_from_in_protocol(self.i_prot_mut()).await?;
      self.i_prot_mut().read_message_end().await?;
      result.ok_or()
    }
  }
}

//
// LongMessageTest service processor
//

#[async_trait]
pub trait LongMessageTestSyncHandler {
  async fn handle_echo(&self, input: Vec<i8>) -> async_thrift::Result<Vec<i8>>;
}

pub struct LongMessageTestSyncProcessor<H: LongMessageTestSyncHandler> {
  handler: H,
}

impl <H: LongMessageTestSyncHandler> LongMessageTestSyncProcessor<H> {
  pub fn new(handler: H) -> LongMessageTestSyncProcessor<H> {
    LongMessageTestSyncProcessor {
      handler,
    }
  }
  async fn process_echo(&self, incoming_sequence_number: i32, i_prot: &mut (dyn TAsyncInputProtocol + Send), o_prot: &mut (dyn TAsyncOutputProtocol + Send)) -> async_thrift::Result<()> {
    TLongMessageTestProcessFunctions::process_echo(&self.handler, incoming_sequence_number, i_prot, o_prot).await
  }
}

pub struct TLongMessageTestProcessFunctions;

impl TLongMessageTestProcessFunctions {
  pub async fn process_echo<H: LongMessageTestSyncHandler>(handler: &H, incoming_sequence_number: i32, i_prot: &mut (dyn TAsyncInputProtocol + Send), o_prot: &mut (dyn TAsyncOutputProtocol + Send)) -> async_thrift::Result<()> {
    let args = LongMessageTestEchoArgs::read_from_in_protocol(i_prot).await?;
    match handler.handle_echo(args.input).await {
      Ok(handler_return) => {
        let message_ident = TMessageIdentifier::new("echo", TMessageType::Reply, incoming_sequence_number);
        o_prot.write_message_begin(&message_ident).await?;
        let ret = LongMessageTestEchoResult { result_value: Some(handler_return) };
        ret.write_to_out_protocol(o_prot).await?;
        o_prot.write_message_end().await?;
        o_prot.flush().await
      },
      Err(e) => {
        match e {
          async_thrift::Error::Application(app_err) => {
            let message_ident = TMessageIdentifier::new("echo", TMessageType::Exception, incoming_sequence_number);
            o_prot.write_message_begin(&message_ident).await?;
            async_thrift::Error::write_application_error_to_out_protocol(&app_err, o_prot).await?;
            o_prot.write_message_end().await?;
            o_prot.flush().await
          },
          _ => {
            let ret_err = {
              ApplicationError::new(
                ApplicationErrorKind::Unknown,
                e.to_string()
              )
            };
            let message_ident = TMessageIdentifier::new("echo", TMessageType::Exception, incoming_sequence_number);
            o_prot.write_message_begin(&message_ident).await?;
            async_thrift::Error::write_application_error_to_out_protocol(&ret_err, o_prot).await?;
            o_prot.write_message_end().await?;
            o_prot.flush().await
          },
        }
      },
    }
  }
}

#[async_trait]
impl <H: LongMessageTestSyncHandler + Send + Sync> TAsyncProcessor for LongMessageTestSyncProcessor<H> {
  async fn process(&self, i_prot: &mut (dyn TAsyncInputProtocol + Send), o_prot: &mut (dyn TAsyncOutputProtocol + Send)) -> async_thrift::Result<()> {
    let message_ident = i_prot.read_message_begin().await?;
    let res = match &*message_ident.name {
      "echo" => {
        self.process_echo(message_ident.sequence_number, i_prot, o_prot).await
      },
      method => {
        Err(
          async_thrift::Error::Application(
            ApplicationError::new(
              ApplicationErrorKind::UnknownMethod,
              format!("unknown method {}", method)
            )
          )
        )
      },
    };
    async_thrift::server::handle_process_result(&message_ident, res, o_prot).await
  }
}

//
// LongMessageTestEchoArgs
//

#[derive(Clone, Debug, Eq, Hash, Ord, PartialEq, PartialOrd)]
struct LongMessageTestEchoArgs {
  input: Vec<i8>,
}

impl LongMessageTestEchoArgs {
  async fn read_from_in_protocol(i_prot: &mut (dyn TAsyncInputProtocol + Send)) -> async_thrift::Result<LongMessageTestEchoArgs> {
    i_prot.read_struct_begin().await?;
    let mut f_1: Option<Vec<i8>> = None;
    loop {
      let field_ident = i_prot.read_field_begin().await?;
      if field_ident.field_type == TType::Stop {
        break;
      }
      let field_id = field_id(&field_ident)?;
      match field_id {
        1 => {
          let list_ident = i_prot.read_list_begin().await?;
          let mut val: Vec<i8> = Vec::with_capacity(list_ident.size as usize);
          for _ in 0..list_ident.size {
            let list_elem_0 = i_prot.read_i8().await?;
            val.push(list_elem_0);
          }
          i_prot.read_list_end().await?;
          f_1 = Some(val);
        },
        _ => {
          i_prot.skip(field_ident.field_type).await?;
        },
      };
      i_prot.read_field_end().await?;
    }
    i_prot.read_struct_end().await?;
    verify_required_field_exists("LongMessageTestEchoArgs.input", &f_1)?;
    let ret = LongMessageTestEchoArgs {
      input: f_1.expect("auto-generated code should have checked for presence of required fields"),
    };
    Ok(ret)
  }
  async fn write_to_out_protocol(&self, o_prot: &mut (dyn TAsyncOutputProtocol + Send)) -> async_thrift::Result<()> {
    let struct_ident = TStructIdentifier::new("echo_args");
    o_prot.write_struct_begin(&struct_ident).await?;
    o_prot.write_field_begin(&TFieldIdentifier::new("input", TType::List, 1)).await?;
    o_prot.write_list_begin(&TListIdentifier::new(TType::I08, self.input.len() as i32)).await?;
    for e in &self.input {
      o_prot.write_i8(*e).await?;
      o_prot.write_list_end().await?;
    }
    o_prot.write_field_end().await?;
    o_prot.write_field_stop().await?;
    o_prot.write_struct_end().await
  }
}

//
// LongMessageTestEchoResult
//

#[derive(Clone, Debug, Eq, Hash, Ord, PartialEq, PartialOrd)]
struct LongMessageTestEchoResult {
  result_value: Option<Vec<i8>>,
}

impl LongMessageTestEchoResult {
  async fn read_from_in_protocol(i_prot: &mut (dyn TAsyncInputProtocol + Send)) -> async_thrift::Result<LongMessageTestEchoResult> {
    i_prot.read_struct_begin().await?;
    let mut f_0: Option<Vec<i8>> = None;
    loop {
      let field_ident = i_prot.read_field_begin().await?;
      if field_ident.field_type == TType::Stop {
        break;
      }
      let field_id = field_id(&field_ident)?;
      match field_id {
        0 => {
          let list_ident = i_prot.read_list_begin().await?;
          let mut val: Vec<i8> = Vec::with_capacity(list_ident.size as usize);
          for _ in 0..list_ident.size {
            let list_elem_1 = i_prot.read_i8().await?;
            val.push(list_elem_1);
          }
          i_prot.read_list_end().await?;
          f_0 = Some(val);
        },
        _ => {
          i_prot.skip(field_ident.field_type).await?;
        },
      };
      i_prot.read_field_end().await?;
    }
    i_prot.read_struct_end().await?;
    let ret = LongMessageTestEchoResult {
      result_value: f_0,
    };
    Ok(ret)
  }
  async fn write_to_out_protocol(&self, o_prot: &mut (dyn TAsyncOutputProtocol + Send)) -> async_thrift::Result<()> {
    let struct_ident = TStructIdentifier::new("LongMessageTestEchoResult");
    o_prot.write_struct_begin(&struct_ident).await?;
    if let Some(ref fld_var) = self.result_value {
      o_prot.write_field_begin(&TFieldIdentifier::new("result_value", TType::List, 0)).await?;
      o_prot.write_list_begin(&TListIdentifier::new(TType::I08, fld_var.len() as i32)).await?;
      for e in fld_var {
        o_prot.write_i8(*e).await?;
        o_prot.write_list_end().await?;
      }
      o_prot.write_field_end().await?;
      ()
    } else {
      ()
    }
    o_prot.write_field_stop().await?;
    o_prot.write_struct_end().await
  }
  fn ok_or(self) -> async_thrift::Result<Vec<i8>> {
    if self.result_value.is_some() {
      Ok(self.result_value.unwrap())
    } else {
      Err(
        async_thrift::Error::Application(
          ApplicationError::new(
            ApplicationErrorKind::MissingResult,
            "no result received for LongMessageTestEcho"
          )
        )
      )
    }
  }
}

